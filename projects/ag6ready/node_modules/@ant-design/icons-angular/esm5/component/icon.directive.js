/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Input, ElementRef, Directive, Renderer2 } from '@angular/core';
import { IconService } from './icon.service';
import { isIconDefinition, printErr, withSuffix } from '../utils';
/**
 * Developers use this component to render an SVG element.
 *
 * For memory usage consideration, this component should be as minimal as possible. IconService would do the most work.
 */
var IconDirective = /** @class */ (function () {
    function IconDirective(_iconService, _elementRef, _renderer) {
        this._iconService = _iconService;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
    }
    /**
     * @return {?}
     */
    IconDirective.prototype._changeIcon = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.type) {
                _this._iconService.getRenderedContent(_this._parseIconType(_this.type, _this.theme), _this.twoToneColor).subscribe(function (svg) {
                    if (svg) {
                        _this._setSVGElement(svg);
                        resolve((/** @type {?} */ (svg)));
                    }
                    else {
                        reject(null);
                    }
                });
            }
            else {
                reject(null);
            }
        });
    };
    /**
     * @param {?} type
     * @param {?} theme
     * @return {?}
     */
    IconDirective.prototype._parseIconType = /**
     * @param {?} type
     * @param {?} theme
     * @return {?}
     */
    function (type, theme) {
        if (isIconDefinition(type)) {
            return type;
        }
        else {
            /** @type {?} */
            var typeTr = (/** @type {?} */ (type));
            if (typeTr.endsWith('-fill') || typeTr.endsWith('-o') || typeTr.endsWith('-twotone')) {
                if (!!theme) {
                    printErr("'type' " + type + " already gets a theme inside so 'theme' " + theme + " would be ignored");
                }
                return type;
            }
            else {
                return withSuffix((/** @type {?} */ (type)), theme || this._iconService.defaultTheme);
            }
        }
    };
    /**
     * @param {?} svg
     * @return {?}
     */
    IconDirective.prototype._setSVGElement = /**
     * @param {?} svg
     * @return {?}
     */
    function (svg) {
        this._clearSVGElement();
        this._renderer.appendChild(this._elementRef.nativeElement, svg);
    };
    /**
     * @return {?}
     */
    IconDirective.prototype._clearSVGElement = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this._elementRef.nativeElement;
        /** @type {?} */
        var children = self.childNodes;
        /** @type {?} */
        var childCount = children.length;
        for (var i = childCount - 1; i >= 0; i--) {
            /** @type {?} */
            var child = (/** @type {?} */ (children[i]));
            if (child.tagName.toLowerCase() === 'svg') {
                this._renderer.removeChild(self, child);
            }
        }
    };
    /**
     * @return {?}
     */
    IconDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this._changeIcon();
    };
    IconDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[antIcon]'
                },] }
    ];
    IconDirective.ctorParameters = function () { return [
        { type: IconService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    IconDirective.propDecorators = {
        type: [{ type: Input }],
        theme: [{ type: Input }],
        twoToneColor: [{ type: Input }]
    };
    return IconDirective;
}());
export { IconDirective };
if (false) {
    /** @type {?} */
    IconDirective.prototype.type;
    /** @type {?} */
    IconDirective.prototype.theme;
    /** @type {?} */
    IconDirective.prototype.twoToneColor;
    /** @type {?} */
    IconDirective.prototype._iconService;
    /** @type {?} */
    IconDirective.prototype._elementRef;
    /** @type {?} */
    IconDirective.prototype._renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW50LWRlc2lnbi9pY29ucy1hbmd1bGFyLyIsInNvdXJjZXMiOlsiY29tcG9uZW50L2ljb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsS0FBSyxFQUVMLFVBQVUsRUFDVixTQUFTLEVBQUUsU0FBUyxFQUNyQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7Ozs7OztBQU9sRTtJQTJERSx1QkFDWSxZQUF5QixFQUN6QixXQUF1QixFQUN2QixTQUFvQjtRQUZwQixpQkFBWSxHQUFaLFlBQVksQ0FBYTtRQUN6QixnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUN2QixjQUFTLEdBQVQsU0FBUyxDQUFXO0lBRWhDLENBQUM7Ozs7SUF4RFMsbUNBQVc7OztJQUFyQjtRQUFBLGlCQWVDO1FBZEMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFDakMsRUFBRSxDQUFDLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsS0FBSSxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFJLENBQUMsY0FBYyxDQUFDLEtBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBQSxHQUFHO29CQUMvRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUNSLEtBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ3pCLE9BQU8sQ0FBQyxtQkFBQSxHQUFHLEVBQWUsQ0FBQyxDQUFDO29CQUM5QixDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDZixDQUFDO2dCQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNmLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7OztJQUVTLHNDQUFjOzs7OztJQUF4QixVQUF5QixJQUE2QixFQUFFLEtBQWdCO1FBQ3RFLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDOztnQkFDQSxNQUFNLEdBQUcsbUJBQUEsSUFBSSxFQUFVO1lBQzdCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckYsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQ1osUUFBUSxDQUFDLFlBQVUsSUFBSSxnREFBMkMsS0FBSyxzQkFBbUIsQ0FBQyxDQUFDO2dCQUM5RixDQUFDO2dCQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDZCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxDQUFDLFVBQVUsQ0FBQyxtQkFBQSxJQUFJLEVBQVUsRUFBRSxLQUFLLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUM3RSxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7Ozs7O0lBRVMsc0NBQWM7Ozs7SUFBeEIsVUFBeUIsR0FBZTtRQUN0QyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsRSxDQUFDOzs7O0lBRVMsd0NBQWdCOzs7SUFBMUI7O1lBQ1EsSUFBSSxHQUFnQixJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWE7O1lBQ2xELFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVTs7WUFDMUIsVUFBVSxHQUFHLFFBQVEsQ0FBQyxNQUFNO1FBRWxDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDOztnQkFDbkMsS0FBSyxHQUFHLG1CQUFBLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBZTtZQUN4QyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMxQyxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7Ozs7SUFTRCxtQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Z0JBcEVGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsV0FBVztpQkFDdEI7OztnQkFYUSxXQUFXO2dCQUhsQixVQUFVO2dCQUNDLFNBQVM7Ozt1QkFlbkIsS0FBSzt3QkFDTCxLQUFLOytCQUNMLEtBQUs7O0lBK0RSLG9CQUFDO0NBQUEsQUFyRUQsSUFxRUM7U0FsRVksYUFBYTs7O0lBQ3hCLDZCQUF1Qzs7SUFDdkMsOEJBQTBCOztJQUMxQixxQ0FBOEI7O0lBc0Q1QixxQ0FBbUM7O0lBQ25DLG9DQUFpQzs7SUFDakMsa0NBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgRWxlbWVudFJlZixcbiAgRGlyZWN0aXZlLCBSZW5kZXJlcjJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJY29uU2VydmljZSB9IGZyb20gJy4vaWNvbi5zZXJ2aWNlJztcbmltcG9ydCB7IEljb25EZWZpbml0aW9uLCBUaGVtZVR5cGUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBpc0ljb25EZWZpbml0aW9uLCBwcmludEVyciwgd2l0aFN1ZmZpeCB9IGZyb20gJy4uL3V0aWxzJztcblxuLyoqXG4gKiBEZXZlbG9wZXJzIHVzZSB0aGlzIGNvbXBvbmVudCB0byByZW5kZXIgYW4gU1ZHIGVsZW1lbnQuXG4gKlxuICogRm9yIG1lbW9yeSB1c2FnZSBjb25zaWRlcmF0aW9uLCB0aGlzIGNvbXBvbmVudCBzaG91bGQgYmUgYXMgbWluaW1hbCBhcyBwb3NzaWJsZS4gSWNvblNlcnZpY2Ugd291bGQgZG8gdGhlIG1vc3Qgd29yay5cbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2FudEljb25dJ1xufSlcbmV4cG9ydCBjbGFzcyBJY29uRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgdHlwZTogc3RyaW5nIHwgSWNvbkRlZmluaXRpb247XG4gIEBJbnB1dCgpIHRoZW1lOiBUaGVtZVR5cGU7XG4gIEBJbnB1dCgpIHR3b1RvbmVDb2xvcjogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBfY2hhbmdlSWNvbigpOiBQcm9taXNlPFNWR0FFbGVtZW50IHwgbnVsbD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodGhpcy50eXBlKSB7XG4gICAgICAgIHRoaXMuX2ljb25TZXJ2aWNlLmdldFJlbmRlcmVkQ29udGVudCh0aGlzLl9wYXJzZUljb25UeXBlKHRoaXMudHlwZSwgdGhpcy50aGVtZSksIHRoaXMudHdvVG9uZUNvbG9yKS5zdWJzY3JpYmUoc3ZnID0+IHtcbiAgICAgICAgICBpZiAoc3ZnKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTVkdFbGVtZW50KHN2Zyk7XG4gICAgICAgICAgICByZXNvbHZlKHN2ZyBhcyBTVkdBRWxlbWVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KG51bGwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9wYXJzZUljb25UeXBlKHR5cGU6IHN0cmluZyB8IEljb25EZWZpbml0aW9uLCB0aGVtZTogVGhlbWVUeXBlKTogSWNvbkRlZmluaXRpb24gfCBzdHJpbmcge1xuICAgIGlmIChpc0ljb25EZWZpbml0aW9uKHR5cGUpKSB7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdHlwZVRyID0gdHlwZSBhcyBzdHJpbmc7XG4gICAgICBpZiAodHlwZVRyLmVuZHNXaXRoKCctZmlsbCcpIHx8IHR5cGVUci5lbmRzV2l0aCgnLW8nKSB8fCB0eXBlVHIuZW5kc1dpdGgoJy10d290b25lJykpIHtcbiAgICAgICAgaWYgKCEhdGhlbWUpIHtcbiAgICAgICAgICBwcmludEVycihgJ3R5cGUnICR7dHlwZX0gYWxyZWFkeSBnZXRzIGEgdGhlbWUgaW5zaWRlIHNvICd0aGVtZScgJHt0aGVtZX0gd291bGQgYmUgaWdub3JlZGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHdpdGhTdWZmaXgodHlwZSBhcyBzdHJpbmcsIHRoZW1lIHx8IHRoaXMuX2ljb25TZXJ2aWNlLmRlZmF1bHRUaGVtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIF9zZXRTVkdFbGVtZW50KHN2ZzogU1ZHRWxlbWVudCk6IHZvaWQge1xuICAgIHRoaXMuX2NsZWFyU1ZHRWxlbWVudCgpO1xuICAgIHRoaXMuX3JlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgc3ZnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBfY2xlYXJTVkdFbGVtZW50KCk6IHZvaWQge1xuICAgIGNvbnN0IHNlbGY6IEhUTUxFbGVtZW50ID0gdGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICAgIGNvbnN0IGNoaWxkcmVuID0gc2VsZi5jaGlsZE5vZGVzO1xuICAgIGNvbnN0IGNoaWxkQ291bnQgPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICBmb3IgKGxldCBpID0gY2hpbGRDb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldIGFzIEhUTUxFbGVtZW50O1xuICAgICAgaWYgKGNoaWxkLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2hpbGQoc2VsZiwgY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBfaWNvblNlcnZpY2U6IEljb25TZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBfZWxlbWVudFJlZjogRWxlbWVudFJlZixcbiAgICBwcm90ZWN0ZWQgX3JlbmRlcmVyOiBSZW5kZXJlcjJcbiAgKSB7XG4gIH1cblxuICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcbiAgICB0aGlzLl9jaGFuZ2VJY29uKCk7XG4gIH1cbn1cbiJdfQ==