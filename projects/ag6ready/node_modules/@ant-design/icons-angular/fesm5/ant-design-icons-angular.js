import { generate } from 'ant-design-palettes';
import { __assign, __spread } from 'tslib';
import { DOCUMENT, CommonModule } from '@angular/common';
import { HttpClient, HttpBackend } from '@angular/common/http';
import { Optional, Inject, RendererFactory2, Input, ElementRef, Directive, Renderer2, NgModule } from '@angular/core';
import { of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} message
 * @return {?}
 */
function printErr(message) {
    console.error("[@ant-design/icons-angular]: " + message + ".");
}
/**
 * @param {?} message
 * @return {?}
 */
function printWarn(message) {
    console.warn("[@ant-design/icons-angular]: " + message + ".");
}
/**
 * @param {?} primaryColor
 * @return {?}
 */
function getSecondaryColor(primaryColor) {
    return generate(primaryColor)[0];
}
/**
 * @param {?} name
 * @param {?} theme
 * @return {?}
 */
function withSuffix(name, theme) {
    switch (theme) {
        case 'fill':
            return name + "-fill";
        case 'outline':
            return name + "-o";
        case 'twotone':
            return name + "-twotone";
        default:
            throw new TypeError("Unknown theme type: " + theme + ", name: " + name);
    }
}
/**
 * @param {?} abbr
 * @return {?}
 */
function mapAbbrToTheme(abbr) {
    return abbr === 'o' ? 'outline' : (/** @type {?} */ (abbr));
}
/**
 * @param {?} name
 * @param {?} theme
 * @param {?} pri
 * @param {?} sec
 * @return {?}
 */
function withSuffixAndColor(name, theme, pri, sec) {
    return withSuffix(name, theme) + "-" + pri + "-" + sec;
}
/**
 * @param {?} target
 * @return {?}
 */
function isIconDefinition(target) {
    return (typeof target === 'object' &&
        typeof target.name === 'string' &&
        typeof target.theme === 'string' &&
        // IconDefinition.icon could be a SVG: We render SVG only once (the first time a icon is used)
        // and return a copy every time after that.
        (target.icon instanceof SVGElement || typeof target.icon === 'string'));
}
/**
 * @param {?} str
 * @return {?}
 */
function getIconDefinitionFromAbbr(str) {
    /** @type {?} */
    var arr = str.split('-');
    /** @type {?} */
    var theme = mapAbbrToTheme(arr.splice(arr.length - 1, 1)[0]);
    /** @type {?} */
    var name = arr.join('-');
    return (/** @type {?} */ ({
        name: name,
        theme: theme,
        icon: ''
    }));
}
/**
 * @param {?} svg
 * @return {?}
 */
function cloneSVG(svg) {
    return (/** @type {?} */ (svg.cloneNode(true)));
}
/**
 * @param {?} raw
 * @return {?}
 */
function replaceFillColor(raw) {
    return raw
        .replace(/['"]#333['"]/g, '"primaryColor"')
        .replace(/['"]#E6E6E6['"]/g, '"secondaryColor"')
        .replace(/['"]#D9D9D9['"]/g, '"secondaryColor"')
        .replace(/['"]#D8D8D8['"]/g, '"secondaryColor"');
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var IconService = /** @class */ (function () {
    function IconService(_rendererFactory, _handler, _document) {
        this._rendererFactory = _rendererFactory;
        this._handler = _handler;
        this._document = _document;
        this.defaultTheme = 'outline';
        /**
         * Register icons.
         */
        this._svgDefinitions = new Map();
        /**
         * Register rendered (with color) SVG icons.
         */
        this._svgCachedDefinitions = new Map();
        /**
         * Default color settings.
         */
        this._twoToneColorPalette = {
            primaryColor: '#333333',
            secondaryColor: '#E6E6E6'
        };
        this._assetsSource = '';
        // For SSR.
        this._renderer = this._rendererFactory.createRenderer(null, null);
        if (this._handler) {
            this._http = new HttpClient(this._handler);
        }
    }
    Object.defineProperty(IconService.prototype, "twoToneColor", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (__assign({}, this.twoToneColor))); // Make a copy to avoid unexpected changes.
        },
        set: /**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var primaryColor = _a.primaryColor, secondaryColor = _a.secondaryColor;
            if (primaryColor && typeof primaryColor === 'string' && typeof secondaryColor === 'string' || typeof secondaryColor === 'undefined') {
                this._twoToneColorPalette.primaryColor = primaryColor;
                this._twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Register IconDefinition provided by Ant Design, parsing AbstractNode to svg string.
     * @param icons
     */
    /**
     * Register IconDefinition provided by Ant Design, parsing AbstractNode to svg string.
     * @param {...?} icons
     * @return {?}
     */
    IconService.prototype.addIcon = /**
     * Register IconDefinition provided by Ant Design, parsing AbstractNode to svg string.
     * @param {...?} icons
     * @return {?}
     */
    function () {
        var icons = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            icons[_i] = arguments[_i];
        }
        this._addIconLiteral.apply(this, __spread(icons));
    };
    /**
     * @param {?} prefix
     * @return {?}
     */
    IconService.prototype.changeAssetsSource = /**
     * @param {?} prefix
     * @return {?}
     */
    function (prefix) {
        this._assetsSource = prefix.endsWith('/') ? prefix : prefix + '/';
    };
    /**
     * Register icon.
     * @param icons Icons that users want to use in their projects. User defined icons and predefined
     *   icons provided by ant-design should implement IconDefinition both.
     */
    /**
     * Register icon.
     * @param {...?} icons Icons that users want to use in their projects. User defined icons and predefined
     *   icons provided by ant-design should implement IconDefinition both.
     * @return {?}
     */
    IconService.prototype._addIconLiteral = /**
     * Register icon.
     * @param {...?} icons Icons that users want to use in their projects. User defined icons and predefined
     *   icons provided by ant-design should implement IconDefinition both.
     * @return {?}
     */
    function () {
        var _this = this;
        var icons = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            icons[_i] = arguments[_i];
        }
        icons.forEach(function (icon) {
            _this._svgDefinitions.set(withSuffix(icon.name, icon.theme), icon);
        });
    };
    /**
     * @param {?} key
     * @return {?}
     */
    IconService.prototype._get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this._svgDefinitions.get(key) || null;
    };
    /**
     * Get an static file and return it as a string, create a IconDefinition and cache it or return null.
     */
    /**
     * Get an static file and return it as a string, create a IconDefinition and cache it or return null.
     * @param {?} url
     * @return {?}
     */
    IconService.prototype._getFromRemote = /**
     * Get an static file and return it as a string, create a IconDefinition and cache it or return null.
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        if (this._http) {
            /** @type {?} */
            var icon_1 = getIconDefinitionFromAbbr(url);
            return this._http.get(this._assetsSource + "assets/" + icon_1.theme + "/" + icon_1.name + ".svg", { responseType: 'text' }).pipe(map(function (svgString) {
                icon_1.icon = svgString;
                _this._addIconLiteral(icon_1);
                return icon_1;
            }), catchError(function () {
                printErr("the icon " + url + " does not exist in your assets folder");
                return of(null);
            }));
        }
        else {
            printWarn('You need to import HttpClient module to use dynamic importing');
            return of(null);
        }
    };
    /**
     * Icon component would call this method to get a SVG element.
     * This method returns a Observable SVG element because when user wants to get an icon from URL, it would be async,
     * so we provided a unified interface here.
     *
     * TODO: namespace in the future
     */
    /**
     * Icon component would call this method to get a SVG element.
     * This method returns a Observable SVG element because when user wants to get an icon from URL, it would be async,
     * so we provided a unified interface here.
     *
     * TODO: namespace in the future
     * @param {?} icon
     * @param {?=} twoToneColor
     * @return {?}
     */
    IconService.prototype.getRenderedContent = /**
     * Icon component would call this method to get a SVG element.
     * This method returns a Observable SVG element because when user wants to get an icon from URL, it would be async,
     * so we provided a unified interface here.
     *
     * TODO: namespace in the future
     * @param {?} icon
     * @param {?=} twoToneColor
     * @return {?}
     */
    function (icon, twoToneColor) {
        var _this = this;
        /** @type {?} */
        var definitionOrNull = isIconDefinition(icon)
            ? (/** @type {?} */ (icon))
            : this._get((/** @type {?} */ (icon)));
        /** @type {?} */
        var $icon = definitionOrNull ? of(definitionOrNull) : this._getFromRemote((/** @type {?} */ (icon)));
        return $icon.pipe(map(function (i) {
            if (i) {
                return _this._loadSVGFromCacheOrCreateNew(i, twoToneColor);
            }
            else {
                printErr("the icon " + icon + " does not exist or is not registered");
                return null;
            }
        }));
    };
    /**
     * @param {?} icon
     * @param {?=} twoToneColor
     * @return {?}
     */
    IconService.prototype._loadSVGFromCacheOrCreateNew = /**
     * @param {?} icon
     * @param {?=} twoToneColor
     * @return {?}
     */
    function (icon, twoToneColor) {
        /** @type {?} */
        var svg;
        /** @type {?} */
        var pri = twoToneColor || this._twoToneColorPalette.primaryColor;
        /** @type {?} */
        var sec = getSecondaryColor(pri) || this._twoToneColorPalette.secondaryColor;
        /** @type {?} */
        var key = withSuffixAndColor(icon.name, icon.theme, pri, sec);
        /** @type {?} */
        var cached = this._svgCachedDefinitions.get(key);
        // If this icon is used before, there should be a copy in cachedDefinitions, just copy it.
        // Otherwise, generate one from string or SVG element, and cache it.
        if (!cached) {
            svg = this._setSVGAttribute(this._colorizeSVGIcon(typeof icon.icon === 'string'
                ? this._createSVGElementFromString(icon.icon)
                : icon.icon, (icon.theme === 'twotone'), pri, sec));
            this._svgCachedDefinitions.set(key, (/** @type {?} */ (__assign({}, icon, { icon: svg }))));
        }
        else {
            svg = cached.icon;
        }
        return cloneSVG(svg);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    IconService.prototype._createSVGElementFromString = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var colorParsed = replaceFillColor(str);
        /** @type {?} */
        var div = this._document.createElement('div');
        div.innerHTML = colorParsed;
        /** @type {?} */
        var svg = div.querySelector('svg');
        if (!svg) {
            throw Error('<svg> tag not found');
        }
        return svg;
    };
    /**
     * @param {?} svg
     * @return {?}
     */
    IconService.prototype._setSVGAttribute = /**
     * @param {?} svg
     * @return {?}
     */
    function (svg) {
        this._renderer.setAttribute(svg, 'width', '1em');
        this._renderer.setAttribute(svg, 'height', '1em');
        return svg;
    };
    /**
     * @param {?} svg
     * @param {?} twotone
     * @param {?} pri
     * @param {?} sec
     * @return {?}
     */
    IconService.prototype._colorizeSVGIcon = /**
     * @param {?} svg
     * @param {?} twotone
     * @param {?} pri
     * @param {?} sec
     * @return {?}
     */
    function (svg, twotone, pri, sec) {
        if (twotone) {
            /** @type {?} */
            var children = svg.childNodes;
            /** @type {?} */
            var length_1 = children.length;
            for (var i = 0; i < length_1; i++) {
                /** @type {?} */
                var child = (/** @type {?} */ (children[i]));
                if (child.getAttribute('fill') === 'secondaryColor') {
                    this._renderer.setAttribute(child, 'fill', sec);
                }
                else {
                    this._renderer.setAttribute(child, 'fill', pri);
                }
            }
        }
        this._renderer.setAttribute(svg, 'fill', 'currentColor');
        return svg;
    };
    /**
     * Clear all cached icons.
     */
    /**
     * Clear all cached icons.
     * @return {?}
     */
    IconService.prototype.clear = /**
     * Clear all cached icons.
     * @return {?}
     */
    function () {
        this._svgDefinitions.clear();
    };
    IconService.ctorParameters = function () { return [
        { type: RendererFactory2 },
        { type: HttpBackend, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }
    ]; };
    return IconService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Developers use this component to render an SVG element.
 *
 * For memory usage consideration, this component should be as minimal as possible. IconService would do the most work.
 */
var IconDirective = /** @class */ (function () {
    function IconDirective(_iconService, _elementRef, _renderer) {
        this._iconService = _iconService;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
    }
    /**
     * @return {?}
     */
    IconDirective.prototype._changeIcon = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.type) {
                _this._iconService.getRenderedContent(_this._parseIconType(_this.type, _this.theme), _this.twoToneColor).subscribe(function (svg) {
                    if (svg) {
                        _this._setSVGElement(svg);
                        resolve((/** @type {?} */ (svg)));
                    }
                    else {
                        reject(null);
                    }
                });
            }
            else {
                reject(null);
            }
        });
    };
    /**
     * @param {?} type
     * @param {?} theme
     * @return {?}
     */
    IconDirective.prototype._parseIconType = /**
     * @param {?} type
     * @param {?} theme
     * @return {?}
     */
    function (type, theme) {
        if (isIconDefinition(type)) {
            return type;
        }
        else {
            /** @type {?} */
            var typeTr = (/** @type {?} */ (type));
            if (typeTr.endsWith('-fill') || typeTr.endsWith('-o') || typeTr.endsWith('-twotone')) {
                if (!!theme) {
                    printErr("'type' " + type + " already gets a theme inside so 'theme' " + theme + " would be ignored");
                }
                return type;
            }
            else {
                return withSuffix((/** @type {?} */ (type)), theme || this._iconService.defaultTheme);
            }
        }
    };
    /**
     * @param {?} svg
     * @return {?}
     */
    IconDirective.prototype._setSVGElement = /**
     * @param {?} svg
     * @return {?}
     */
    function (svg) {
        this._clearSVGElement();
        this._renderer.appendChild(this._elementRef.nativeElement, svg);
    };
    /**
     * @return {?}
     */
    IconDirective.prototype._clearSVGElement = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this._elementRef.nativeElement;
        /** @type {?} */
        var children = self.childNodes;
        /** @type {?} */
        var childCount = children.length;
        for (var i = childCount - 1; i >= 0; i--) {
            /** @type {?} */
            var child = (/** @type {?} */ (children[i]));
            if (child.tagName.toLowerCase() === 'svg') {
                this._renderer.removeChild(self, child);
            }
        }
    };
    /**
     * @return {?}
     */
    IconDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this._changeIcon();
    };
    IconDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[antIcon]'
                },] }
    ];
    IconDirective.ctorParameters = function () { return [
        { type: IconService },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    IconDirective.propDecorators = {
        type: [{ type: Input }],
        theme: [{ type: Input }],
        twoToneColor: [{ type: Input }]
    };
    return IconDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var IconModule = /** @class */ (function () {
    function IconModule() {
    }
    IconModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    exports: [IconDirective],
                    declarations: [IconDirective],
                    providers: [IconService]
                },] }
    ];
    return IconModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// This icon file is generated by build/generate.ts
// tslint:disable
/** @type {?} */
var manifest = {
    fill: [
        'account-book',
        'alert',
        'alipay-circle',
        'alipay-square',
        'amazon-circle',
        'aliwangwang',
        'amazon-square',
        'android',
        'api',
        'apple',
        'appstore',
        'audio',
        'backward',
        'behance-circle',
        'bank',
        'behance-square',
        'bell',
        'book',
        'box-plot',
        'build',
        'bulb',
        'calculator',
        'calendar',
        'camera',
        'caret-down',
        'car',
        'caret-left',
        'caret-right',
        'caret-up',
        'carry-out',
        'check-circle',
        'check-square',
        'chrome',
        'ci-circle',
        'clock-circle',
        'close-circle',
        'close-square',
        'code-sandbox-circle',
        'cloud',
        'code-sandbox-square',
        'code',
        'codepen-circle',
        'codepen-square',
        'compass',
        'contacts',
        'container',
        'control',
        'copy',
        'copyright-circle',
        'credit-card',
        'crown',
        'customer-service',
        'dashboard',
        'database',
        'delete',
        'diff',
        'dingtalk-circle',
        'dingtalk-square',
        'dislike',
        'dollar-circle',
        'down-circle',
        'down-square',
        'dribbble-circle',
        'dribbble-square',
        'dropbox-circle',
        'dropbox-square',
        'environment',
        'edit',
        'euro-circle',
        'exclamation-circle',
        'experiment',
        'eye',
        'fast-backward',
        'facebook',
        'fast-forward',
        'file-add',
        'file-excel',
        'file-exclamation',
        'file-image',
        'file-markdown',
        'file-pdf',
        'file-ppt',
        'file-text',
        'file-unknown',
        'file-word',
        'file-zip',
        'file',
        'filter',
        'fire',
        'flag',
        'folder-open',
        'folder-add',
        'folder',
        'forward',
        'frown',
        'funnel-plot',
        'fund',
        'gift',
        'github',
        'gitlab',
        'golden',
        'google-circle',
        'google-plus-circle',
        'google-plus-square',
        'google-square',
        'hdd',
        'highlight',
        'heart',
        'home',
        'hourglass',
        'html5',
        'idcard',
        'ie-circle',
        'ie-square',
        'info-circle',
        'instagram',
        'interation',
        'insurance',
        'layout',
        'left-circle',
        'left-square',
        'like',
        'linkedin',
        'lock',
        'medicine-box',
        'mail',
        'medium-circle',
        'medium-square',
        'meh',
        'message',
        'minus-circle',
        'minus-square',
        'money-collect',
        'mobile',
        'notification',
        'pause-circle',
        'pay-circle',
        'phone',
        'picture',
        'pie-chart',
        'play-circle',
        'play-square',
        'plus-circle',
        'plus-square',
        'pound-circle',
        'printer',
        'profile',
        'project',
        'property-safety',
        'pushpin',
        'qq-circle',
        'qq-square',
        'question-circle',
        'read',
        'reconciliation',
        'red-envelope',
        'reddit-circle',
        'reddit-square',
        'rest',
        'right-circle',
        'right-square',
        'rocket',
        'safety-certificate',
        'schedule',
        'save',
        'security-scan',
        'setting',
        'shop',
        'shopping',
        'sketch-circle',
        'sketch-square',
        'skin',
        'skype',
        'slack-circle',
        'slack-square',
        'sliders',
        'smile',
        'snippets',
        'sound',
        'star',
        'step-backward',
        'step-forward',
        'stop',
        'switcher',
        'tablet',
        'tag',
        'tags',
        'taobao-circle',
        'taobao-square',
        'thunderbolt',
        'tool',
        'trademark-circle',
        'trophy',
        'twitter-circle',
        'twitter-square',
        'unlock',
        'up-circle',
        'up-square',
        'video-camera',
        'usb',
        'wallet',
        'warning',
        'weibo-circle',
        'wechat',
        'weibo-square',
        'windows',
        'yahoo',
        'youtube',
        'yuque',
        'zhihu-square',
        'zhihu-circle'
    ],
    outline: [
        'account-book',
        'alert',
        'alipay-circle',
        'aliwangwang',
        'android',
        'api',
        'apple',
        'appstore',
        'audio',
        'backward',
        'bank',
        'behance-square',
        'bell',
        'book',
        'box-plot',
        'build',
        'bulb',
        'calculator',
        'calendar',
        'camera',
        'caret-down',
        'car',
        'caret-left',
        'caret-right',
        'caret-up',
        'carry-out',
        'check-circle',
        'check-square',
        'chrome',
        'clock-circle',
        'close-circle',
        'close-square',
        'cloud',
        'code',
        'codepen-circle',
        'compass',
        'contacts',
        'container',
        'control',
        'copy',
        'credit-card',
        'crown',
        'customer-service',
        'dashboard',
        'database',
        'delete',
        'diff',
        'dislike',
        'down-circle',
        'down-square',
        'dribbble-square',
        'environment',
        'edit',
        'exclamation-circle',
        'experiment',
        'eye',
        'fast-backward',
        'facebook',
        'fast-forward',
        'file-add',
        'file-excel',
        'file-exclamation',
        'file-image',
        'file-markdown',
        'file-pdf',
        'file-ppt',
        'file-text',
        'file-unknown',
        'file-word',
        'file-zip',
        'file',
        'filter',
        'fire',
        'flag',
        'folder-open',
        'folder-add',
        'folder',
        'forward',
        'frown',
        'funnel-plot',
        'fund',
        'gift',
        'github',
        'gitlab',
        'hdd',
        'highlight',
        'heart',
        'home',
        'hourglass',
        'html5',
        'idcard',
        'info-circle',
        'instagram',
        'interation',
        'insurance',
        'layout',
        'left-circle',
        'left-square',
        'like',
        'linkedin',
        'lock',
        'medicine-box',
        'mail',
        'meh',
        'message',
        'minus-circle',
        'minus-square',
        'money-collect',
        'mobile',
        'notification',
        'pause-circle',
        'pay-circle',
        'phone',
        'picture',
        'pie-chart',
        'play-circle',
        'play-square',
        'plus-circle',
        'plus-square',
        'printer',
        'profile',
        'project',
        'property-safety',
        'pushpin',
        'question-circle',
        'read',
        'reconciliation',
        'red-envelope',
        'rest',
        'right-circle',
        'right-square',
        'rocket',
        'safety-certificate',
        'schedule',
        'save',
        'security-scan',
        'setting',
        'shop',
        'shopping',
        'skin',
        'skype',
        'slack-square',
        'sliders',
        'smile',
        'snippets',
        'sound',
        'star',
        'step-backward',
        'step-forward',
        'stop',
        'switcher',
        'tablet',
        'tag',
        'tags',
        'taobao-circle',
        'thunderbolt',
        'tool',
        'trophy',
        'unlock',
        'up-circle',
        'up-square',
        'video-camera',
        'usb',
        'wallet',
        'warning',
        'weibo-circle',
        'wechat',
        'weibo-square',
        'windows',
        'yahoo',
        'youtube',
        'yuque',
        'align-center',
        'alibaba',
        'align-left',
        'align-right',
        'alipay',
        'aliyun',
        'amazon',
        'ant-cloud',
        'ant-design',
        'apartment',
        'area-chart',
        'arrow-down',
        'arrow-left',
        'arrow-right',
        'arrow-up',
        'arrows-alt',
        'audit',
        'bar-chart',
        'barcode',
        'bars',
        'behance',
        'bg-colors',
        'block',
        'bold',
        'border-bottom',
        'border-horizontal',
        'border-inner',
        'border-outer',
        'border-left',
        'border-right',
        'border-top',
        'border-verticle',
        'branches',
        'border',
        'check',
        'ci',
        'close',
        'cloud-server',
        'cloud-sync',
        'cloud-upload',
        'cluster',
        'cloud-download',
        'code-sandbox',
        'codepen',
        'coffee',
        'colum-height',
        'column-width',
        'copyright',
        'dash',
        'deployment-unit',
        'desktop',
        'dingding',
        'disconnect',
        'dot-chart',
        'dollar',
        'double-right',
        'double-left',
        'down',
        'download',
        'drag',
        'dribbble',
        'dropbox',
        'ellipsis',
        'enter',
        'euro',
        'exception',
        'exclamation',
        'export',
        'fall',
        'file-done',
        'file-jpg',
        'file-protect',
        'file-search',
        'file-sync',
        'font-colors',
        'font-size',
        'fork',
        'form',
        'fullscreen-exit',
        'fullscreen',
        'gateway',
        'global',
        'gold',
        'google-plus',
        'google',
        'heat-map',
        'import',
        'ie',
        'inbox',
        'info',
        'issues-close',
        'italic',
        'key',
        'laptop',
        'left',
        'line-chart',
        'line-height',
        'line',
        'loading-3-quarters',
        'link',
        'loading',
        'login',
        'logout',
        'man',
        'medium-workmark',
        'medium',
        'menu-fold',
        'menu-unfold',
        'menu',
        'minus',
        'monitor',
        'mr',
        'number',
        'ordered-list',
        'paper-clip',
        'pause',
        'percentage',
        'pic-center',
        'pic-right',
        'pic-left',
        'plus',
        'pound',
        'poweroff',
        'qq',
        'qrcode',
        'question',
        'radar-chart',
        'radius-bottomleft',
        'radius-bottomright',
        'radius-upleft',
        'radius-setting',
        'radius-upright',
        'reddit',
        'redo',
        'reload-time',
        'reload',
        'retweet',
        'right',
        'rise',
        'rollback',
        'robot',
        'safety',
        'scan',
        'scissor',
        'search',
        'select',
        'shake',
        'share-alt',
        'shopping-cart',
        'shrink',
        'sketch',
        'slack',
        'small-dash',
        'solution',
        'sort-ascending',
        'sort-descending',
        'stock',
        'swap-left',
        'strikethrough',
        'swap-right',
        'swap',
        'sync',
        'table',
        'taobao',
        'team',
        'to-top',
        'trademark',
        'transaction',
        'underline',
        'twitter',
        'undo',
        'unordered-list',
        'upload',
        'up',
        'user-delete',
        'user',
        'usergroup-add',
        'usergroup-delete',
        'user-add',
        'vertical-align-bottom',
        'vertical-align-middle',
        'vertical-align-top',
        'vertical-left',
        'vertical-right',
        'weibo',
        'wifi',
        'woman',
        'zhihu',
        'zoom-in',
        'zoom-out'
    ],
    twotone: [
        'account-book',
        'alert',
        'api',
        'appstore',
        'audio',
        'bank',
        'bell',
        'book',
        'box-plot',
        'build',
        'bulb',
        'calculator',
        'camera',
        'car',
        'carry-out',
        'check-circle',
        'check-square',
        'clock-circle',
        'close-circle',
        'close-square',
        'cloud',
        'code',
        'compass',
        'contacts',
        'container',
        'control',
        'copy',
        'credit-card',
        'crown',
        'customer-service',
        'dashboard',
        'database',
        'delete',
        'diff',
        'dislike',
        'down-circle',
        'down-square',
        'environment',
        'edit',
        'exclamation-circle',
        'experiment',
        'eye',
        'file-add',
        'file-excel',
        'file-exclamation',
        'file-image',
        'file-markdown',
        'file-pdf',
        'file-ppt',
        'file-text',
        'file-unknown',
        'file-word',
        'file-zip',
        'file',
        'filter',
        'fire',
        'flag',
        'folder-open',
        'folder-add',
        'folder',
        'frown',
        'funnel-plot',
        'fund',
        'gift',
        'hdd',
        'highlight',
        'heart',
        'home',
        'hourglass',
        'html5',
        'idcard',
        'info-circle',
        'interation',
        'insurance',
        'layout',
        'left-circle',
        'left-square',
        'like',
        'lock',
        'medicine-box',
        'mail',
        'meh',
        'message',
        'minus-circle',
        'minus-square',
        'money-collect',
        'mobile',
        'notification',
        'pause-circle',
        'phone',
        'picture',
        'pie-chart',
        'play-circle',
        'play-square',
        'plus-circle',
        'plus-square',
        'pound-circle',
        'printer',
        'profile',
        'project',
        'property-safety',
        'pushpin',
        'question-circle',
        'reconciliation',
        'red-envelope',
        'rest',
        'right-circle',
        'right-square',
        'rocket',
        'safety-certificate',
        'schedule',
        'save',
        'security-scan',
        'setting',
        'shop',
        'shopping',
        'skin',
        'sliders',
        'smile',
        'snippets',
        'sound',
        'star',
        'stop',
        'switcher',
        'tablet',
        'tag',
        'tags',
        'thunderbolt',
        'tool',
        'trademark-circle',
        'trophy',
        'unlock',
        'up-circle',
        'up-square',
        'video-camera',
        'usb',
        'wallet',
        'warning',
        'ci',
        'copyright',
        'dollar',
        'euro',
        'gold',
        'canlendar'
    ]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { IconModule, IconService, IconDirective, printErr, printWarn, getSecondaryColor, withSuffix, withSuffixAndColor, isIconDefinition, getIconDefinitionFromAbbr, cloneSVG, replaceFillColor, manifest };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,